from Cassandra import Cassandra
from Download import Download
from Scrapper import ImageScrapper
from Email import SendEmail
from Logger import Logging

logger_obj = Logging("Advance Image Downloader")
logger_obj.initialize_logger()

class HelperClass :
    def helper_image(self, keyword, count_image, email, req_id, schedule_job):
        """
        Calls classes and method to for inserting images in databases
        :param keyword: search query given by user
        :param count_image: Number of images to download
        :param email: Email
        :param req_id: Unique request generated by user
        :param schedule_job:scheduler object
        :return:
        """
        try:
            message = 'Subject:{} \n\n {}'.format('Job scheduling started',
                                                  'your job has been started and you will get downloadable link')
            self.helper_email(email, str(req_id), keyword, message)

            cassandra = Cassandra()
            cassandra.connect_keyspace()
            cassandra.create_table('ImagesData')

            image_scrapper = ImageScrapper(count_image)
            image_scrapper.createURL(keyword)
            image_scrapper.fetch_thumbnails(req_id,email,cassandra)

            self.helper_download(email, keyword, req_id, schedule_job, cassandra)

        except Exception as e:
            logger_obj.log_print("Helper - helper_image has exception" + str(e), 'Exception')

            error_message = 'Subject : Error in job  \n\n There is some error in execution, please try again'
            self.helper_email(email, message=error_message)
            self.helper_delete(str(req_id))
            raise Exception(e)

    @staticmethod
    def helper_email(email,req_id=None,keyword=None, message=None):
        """
        It calls method for email to send
        :param email: email address input given by user
        :param req_id: unique id generated for user req
        :param keyword: Query submitted by user
        :param message: email message
        """
        try:
            if not message:
                message = 'Subject: Link to download images \n\n Hi \n Please find link in the email to download ' \
                          'requested images {}'.format('download/'+ keyword.replace(' ','')+'/'+str(req_id))

            email_obj=SendEmail()
            email_obj.send_notification(email, message)
        except Exception as e:
            logger_obj.log_print("Helper class - helper_email has exception"+str(e),"Exception")

    @staticmethod
    def helper_delete(req_id):
        """
        This method calls method to delete files
        :param req_id: Unique request id
        """
        try:
            logger_obj.log_print('Deleting operation started','info')

            Download.delete_file(req_id)

            logger_obj.log_print('all files are deleted','info')
            print("Files are deleted")

            cassandra = Cassandra()
            logger_obj.log_print('Connected to cassandra','Info')
            cassandra.connect_keyspace()
            cassandra.delete_url('ImagesData',req_id)
            logger_obj.log_print('Delete operation from cassandra is done','info')

        except Exception as e:
            logger_obj.log_print('Helper - helper_delete has exception'+ str(e), 'Exception')
            raise Exception (e)

    def helper_download(self, email, keyword, req_id, schedule_job, cassandra = None):
        """
        :param email: Email address of the receiver
        :param keyword: input given by user for image
        :param req_id: unique req_id
        :param schedule_job:SchedulerClass object
        :param cassandra:Cassandra Object
        :return:
        """
        try:
            if not cassandra :
                cassandra = Cassandra()
                cassandra.connect_keyspace()
                logger_obj.log_print('connected to database','info')

            result = cassandra.select_query(req_id,'ImagesData')

            if result:
                logger_obj.log_print('Result is found','Info')
                download_obj = Download(result)
                str_req_id = str(req_id)

                #Creating directory for saving images
                Download.create_dir(str_req_id)
                logger_obj.log_print('Directory crreated','Info')

                #Downloading images
                download_obj.download_images(keyword,str_req_id)
                logger_obj.log_print('images are downloaded','Info')

                #creating zip file
                Download.create_zip(str_req_id)
                logger_obj.log_print('Zip file is created')

                # Delete files
                schedule_job.delete_files_job_queue(str_req_id, 5)
                logger_obj.log_print('delete files operation initiated','Info')

                #Send email
                self.helper_email(email,str_req_id,keyword)
            else:
                logger_obj.log_print('App.py - has exception ','Exception')
                raise Exception('not allowed to access or link has expired')

        except Exception as e:
            logger_obj.log_print('App.py has exception and not allowed to access','Exception')
            raise Exception(e)





