import os

from cassandra.auth import PlainTextAuthProvider
from cassandra.cluster import Cluster
from Logger import Logging

import config

logger_obj = Logging("Advance Image Downloader")
logger_obj.initialize_logger()
cloud_config_path="secure-connect-imagescrapper.zip"
cassandra_uname="DjacqRjEvdZMthlfwOMsdIOa"
cassandra_password="e3KDbZTgj89vgPhMjdvEaFrE,rSqX,csHooIn_5S_34o12g_,mC-Mw.G+g4wsP8oOMl,1FqxC_C_SYFAg47Qjs2xxg3Kg1iib70GS7FqpyE6mbG2z866S-.n7KGt3pWs"
class Cassandra:
    """
    This class connects to database and have functions of DB operations
    """
    def __init__(self):
        """
        Initiate connectivity to cassandra database
        """
        try:
            cloud_config = {
                'secure_connect_bundle': cloud_config_path
            }
            auth_provider = PlainTextAuthProvider(cassandra_uname, cassandra_password)
            cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
            self.session = cluster.connect()
        except Exception as e:
            logger_obj.log_print("Cassandra.py - __init__() has exception"+str(e), "Exception")
            raise Exception(e)

    def connect_keyspace(self):
        """
        This function connects keyspaces
        :return:
        """
        try:
            self.session.set_keyspace("Imagescrapper")
        except Exception as e:
            logger_obj.log_print('Cassandra.py - connect_keyspace has exception '+str(e), "Exception")
            raise Exception(e)

    def create_table(self, table):
        """
        creates table if it doesnt exists
        :return:
        """
        try:
            self.session.execute('CREATE TABLE IF NOT EXISTS {}'
                                 '(id UUID, email text,url text, PRIMARY KEY(id,email,url));'
                                 .format(table))
        except Exception as e:
            logger_obj.log_print('Cassandra - create_table has exception' + str(e), "Exception")
            raise Exception(e)
    
    def select_query(self, req_id, table):
        """
        This selects the query based on given req_id
        :param table: table name
        :param req_id: it is unique request id generated by user
        :return: Return result od selected query
        """
        try:
            return self.session.execute('SELECT id,email,url FROM {} WHERE id = {} '.format(table,req_id))
        except Exception as e:
            logger_obj.log_print("Cassandra.py - select_query has exception "+str(e), "Exception")
            raise Exception (e)
    def insert_url(self, table, uuid, email, url):
        """
        Insert data in table
        :param table: table name in which data to be insert
        :param uuid:unique user id
        :param email: email address given as input by user
        :param url:url of the search query
        """
        try:
            self.session.execute("INSERT into" + table + "(id,email,url) VALUES (%s,%s,%s)", (uuid, email, url))
        except Exception as e:
            logger_obj.log_print("Cassandra - insert_url has exception" + str(e), "Exception")
            raise Exception(e)

    def shutdown(self):
        """
        close Cassandra session
        """
        try:
            self.session.shutdown()
        except Exception as e:
            logger_obj.log_print("Cassandra - shutdown has exception" + str(e), "Exception")
            raise Exception(e)

    def delete_url(self, table, req_id):
        """
        :param req_id: it is unique request id generated by user
        """
        try:
            self.session.execute('DELETE FROM'+ table +'WHERE id={}'.format(req_id))
        except Exception as e:
            logger_obj.log_print("Cassandra - delete_url has exception" + str(e), "Exception")
            raise Exception(e)

    def drop_table(self,table):
        """
        Drops table from keyspace
        """
        try:
            self.session.execute('DROP TABLE IF EXISTS'.format(table))
        except Exception as e:
            logger_obj.log_print("Cassandra - drop table has exception" + str(e), "Exception")
            raise Exception(e)